
// date:20200316
// author:somecare

// 栈，队列

#include <queue>
class MyStack{
private:
	std::queue<int> data;

public:
	MyStack(){}
	// 用队列实现栈
	void push(int x)
	{
		std::Queue<int> temp_queue;
		temp_queue.push(x);
		
		while(!data.empty())
		{
			temp_queue.push(data.front());
			data.pop();
		}
		while(!temp_queue.empty())
		{
			data.push(temp_queue.front());
			temp_queue.pop();
		}
	
	}
	int pop()
	{
		int x = data.front();
		data.pop();
		return x;
	}
	int top()
	{
		return data.front();
	}
	bool empty()
	{
		return data.empty();
	}
}



// 用栈实现队列

class MyQueue
{
private:
	std::stack<int> data;
	
public:
	MyQueue(){}
	void push(int x)
	{
		std::stack<int> temp_stack;
		while(! data.empty())
		{
			temp_stack.push(data.top());
			data.pop();
		}
		temp_stack.push(x);
		while(! temp_stack.empty())
		{
			data.push(temp_stack.pop());
			temp_stack.pop();
		}
	}
	int peek()
	{
		return data.top();
	}
	int pop()
	{
		int x = data.top();
		data.pop();
		return x;
	}
	bool empty()
	{
		return data.empty();
	}
	
}


// 设计一个栈，可以返回栈内最小元素

class MinStack
{
private:
	std::stack<int> data;
	std::stack<int> min;
	
public:
	MinStack(){}
	void push(int x)
	{
		data.push(x);
		if(min.empty())
		{
			min.push(x);
		}
		else
		{
			if(x > min.top())
			{
				x = min.top();
			}
			min.push(x);
		}
	}
	void pop()
	{
		data.pop();
		min.pop();
	}
	int top()
	{
		return data.top();
	}
	int getMin()
	{
		return min.top();
	}
}


// 1至n的数字序列，按顺序入栈，每个数字入栈后即可出栈，也可在栈中
// 停留，等待后面的数字出栈后，该数字再出栈，求该数字序列的出栈序列是否合法。
#include<stack>
#include<queue>

bool check_is_valid_order(std::queue<int> &order)
{
	std::stack<int > tempS;
	int n = order.size();
	for(int i = 0;i < n;i++)
	{
		tempS.push(i);
		while(!tempS.empty() && tempS.top() == order.front())
		{
			S.pop();
			order.pop();
		}
	}
	if(!S.empty())
	{
		return false;
	}
	return true;
}


// 设计一个计算器，输入一个字符串存储的数学表达式，可以包含(,),+,-四种符号
// 的数学表达式，输入合法，且可能存在空格符，计算结果

// 计算函数
void compute(std::stack<int> &number_stack,std::stack<char> &operation_stack)
{
	if(number_stack.size() < 2)
	{
		return;
	}
	int num1 = number_stack.top();
	number_stack.pop();
	int num2 = number_stack.top();
	number_stack.pop();
	if(operation_stack.top() == '+')
	{
		number_stack.push(num1+num2);
	}
	else if(operation_stack.top() == '-')
	{
		number_stack.push(num2-num1);
	}
	operation_stack.pop();
}

#include<string>
#include<stack>

class Solution
{
public:
	int calculate(std::string s)
	{
		static const int STATE_BEGIN = 0;
		static const int NUMBER_STATE = 1;
		static const int OPERATION_STATE = 2;
		std::stack<int> number_stack;
		std::stack<char> operation_stack;
		int number = 0;
		int STATE = STATE_BEGIN;
		int compute_flag = 0;
		for(int i = 0;i < s.length();i++)
		{
			if(s[i] == ' ')
			{
				continue;
			}
			switch(STATE)
			{
				case STATE_BEGIN:
					if(s[i] >= '0' && s[i] <= '9')
					{
						STATE = NUMBER_STATE;
					}
					else
					{
						STATE = OPERATION_STATE;
					}
					i--;
					break;
					
				case NUMBER_STATE:
					if(s[i] >= '0' && s[i] <= '9')
					{
						// 考虑多位数
						number = number * 10 + s[i] - '0';
					}
					else
					{
						number_stack.push(number);
						if(compute_flag == 1)
						{
							compute(number_stack,operation_stack);
						}
						number = 0;
						i--;
						STATE = OPERATION_STATE;
					}
					
				case OPERATION_STATE:
					if(s[i] == '+' || s[i] == '-')
					{
						operation_stack.push(s[i]);
						compute_flag = 1;
					}
					else if(s[i] >= '0' && s[i] <= '9')
					{
						STATE = NUMBER_STATE;
						i--;
					}
					else if(s[i] == '(')
					{
						STATE = NUMBER_STATE;
						compute_flag = 0;
					}
					else if(s[i] == ')')
					{
						compute(number_stack,operation_stack);
					}
					break;
			}
		}
		if(number != 0)
		{
			number_stack.push(number);
			compute(number_stack,operation_stack);
		}
		if(number == 0 && number_stack.empty())
		{
			return 0;
		}
		return number_stack.top();
	}
};


// 最大堆 最小堆




#include<queue>
#include<vector>
#include<iostream>
#include<string>
#include<functional>
using namespace std;
int main()
{
	priority_queue<int> big_heap; // 默认构造最大堆
	priority_queue<int, vector<int>,greater<int>> small_heap; // 最小堆构造方法
	priority_queue<int, vector<int>,less<int>> big_heap2;
	
	if(big_heap.empty())
	{
		cout<<"big_heap is empty!\n"<<endl;
	}
	int test[] = {6,10,1,7,99,7,33};
	for(int i = 0;i < 7;i++)
	{
		big_heap.push(test[i]);
	}
	cout<<"big_heap.top = "<<big_heap.top()<<endl;
	
	for(i = 0;i < 3;i++)
	{
		big_heap.pop();
	}
	cout<<"big_heap.top() = "<<big_heap.top()<<endl;
	cout<<"big_heap.size() = "<<big_heap.size()<<endl;
	return 0;
}


// 已知一个未排序的数组，求这个数组中第K大的数字。
// 利用最小堆求解
#include<vector>
#include<iostream>
#include<>queue>
#include<functional>

using namespace std;

class Solution
{
public:
	int findKthLargest(vector<int>&nums, int k)
	{
		priority_queue<int, vector<int>,greater<int> >Q;
		for(int i = 0;i < nums.size();i++)
		{
			if(Q.size() < k)
			{
				Q.push()nums[i];
			}
			else if(nums[i] > Q.top())
			{
				Q.pop();
				Q.push(nums[i]);
			}
		}
		return Q.top();
	}
	
}


// 设计一个数据结构，该数据结构动态维护一组数据，支持如下操作：
// 1. 添加新元素
// 2. 返回数据中的中位数
// 3. 数据个数为奇数，返回中间的；若为偶数，返回中间两个数的均值

// 思路：维护两个堆，一个最大堆，一个最小堆

void addNum(int num)
{
	if(big_queue.empty())
	{
		big_queue.push(num);
		return;
	}
	if(big_queue.size() == small_queue.size())
	{
		if(num < big_queue.top())
		{
			big_queue.push(num);
		}
		else
		{
			small_queue.push(num);
		}
	}
	else if(big_queue.size() > small_queue.size())
	{
		if(num > big_queue.top())
		{
			small_queue.push(num);
		}
		else
		{
			small_queue.push(big_queue.top());
			big_queue.pop();
			big_queue.push(num);
		}
	}
	else if(big_queue.size() < small_queue.size())
	{
		if(small_queue.top() > num)
		{
			big_queue.push(num);
		}
		else
		{
			big_queue.push(small_queue.top());
			small_queue.pop();
			small_queue.push(num);
		}
	}
}


double findMedian()
{
	if(big_queue.size() == small_queue.size())
	{
		return((big_queue.top() + small_queue.top())/2);
	}
	else if(big_queue.size() > small_queue.size())
	{
		return big_queue.top();
	}
	else
	{
		return small_queue.top();
	}
}



































